/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package kidsland;
import javax.swing.*;
import java.awt.*;
import java.io.ByteArrayInputStream;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Random;
import javax.imageio.ImageIO;

/**
 *
 * @author Cheas
 */
public class BookingPage extends javax.swing.JFrame {
    
    private JLabel jLabelImage;
    private int idPanier; 
    private double TotalPrice = 0.0;
 

    /**
     * Creates new form BookingPage
     */
    public BookingPage() {
        initComponents();
        initializePanierPrincipal(); 
       
        loadPrice(2, jP1 );
        loadPrice(3, jP2 );
        loadPrice(4, jP3 );
        loadPrice(5, jP4 );
        loadPrice(6, jP5 );
        loadPrice(7, jP6 );
        loadPrice(8, jP7 );
        loadPrice(9, jP8 );
        loadPrice(10, jP9 );

        loadImage("2", photo1);
        loadImage("3", photo2);
        loadImage("4", photo3);
        loadImage("5", photo4);
        loadImage("6", photo5);
        loadImage("7", photo6);
        loadImage("8", photo7);
        loadImage("9", photo8);
        loadImage("10", photo9);
    }
    
    private void initializePanierPrincipal() {
    Connection conn = null;
    try {
        conn = Mysqlc.mycon();
        Random random = new Random();
        boolean idExists;
        do {
            idPanier = random.nextInt(100000); // Générer un ID aléatoire
            String checkQuery = "SELECT id FROM panierprincipal WHERE id = ?";
            try (PreparedStatement checkStmt = conn.prepareStatement(checkQuery)) {
                checkStmt.setInt(1, idPanier);
                try (ResultSet rs = checkStmt.executeQuery()) {
                    idExists = rs.next();
                }
            }
        } while (idExists);

        String insertPanierPrincipalQuery = "INSERT INTO panierprincipal (id, dateCreation) VALUES (?, ?)";
        try (PreparedStatement pstmt = conn.prepareStatement(insertPanierPrincipalQuery)) {
            pstmt.setInt(1, idPanier);
            pstmt.setDate(2, new java.sql.Date(System.currentTimeMillis()));
            pstmt.executeUpdate();
        }
    } catch (Exception e) {
        e.printStackTrace();
        JOptionPane.showMessageDialog(this, "Erreur lors de l'initialisation du panier principal : " + e.getMessage());
    } finally {
        try {
            if (conn != null) {
                conn.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollBar1 = new javax.swing.JScrollBar();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        photo2 = new javax.swing.JLabel();
        photo3 = new javax.swing.JLabel();
        photo6 = new javax.swing.JLabel();
        photo4 = new javax.swing.JLabel();
        photo5 = new javax.swing.JLabel();
        photo7 = new javax.swing.JLabel();
        photo8 = new javax.swing.JLabel();
        photo10 = new javax.swing.JLabel();
        photo1 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jSpinner2 = new javax.swing.JSpinner();
        jSpinner4 = new javax.swing.JSpinner();
        jSpinner6 = new javax.swing.JSpinner();
        jSpinner3 = new javax.swing.JSpinner();
        jSpinner5 = new javax.swing.JSpinner();
        jSpinner7 = new javax.swing.JSpinner();
        jSpinner8 = new javax.swing.JSpinner();
        jSpinner9 = new javax.swing.JSpinner();
        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 32767));
        jScrollBar2 = new javax.swing.JScrollBar();
        jPAY = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        photo9 = new javax.swing.JLabel();
        jSpinner10 = new javax.swing.JSpinner();
        jDC1 = new com.toedter.calendar.JDateChooser();
        jDC2 = new com.toedter.calendar.JDateChooser();
        jDC3 = new com.toedter.calendar.JDateChooser();
        jDC4 = new com.toedter.calendar.JDateChooser();
        jDC5 = new com.toedter.calendar.JDateChooser();
        jDC6 = new com.toedter.calendar.JDateChooser();
        jDC7 = new com.toedter.calendar.JDateChooser();
        jDC8 = new com.toedter.calendar.JDateChooser();
        jDC9 = new com.toedter.calendar.JDateChooser();
        jDC10 = new com.toedter.calendar.JDateChooser();
        jP1 = new javax.swing.JLabel();
        jP2 = new javax.swing.JLabel();
        jP4 = new javax.swing.JLabel();
        jP5 = new javax.swing.JLabel();
        jP6 = new javax.swing.JLabel();
        jP7 = new javax.swing.JLabel();
        jP9 = new javax.swing.JLabel();
        jP3 = new javax.swing.JLabel();
        jP8 = new javax.swing.JLabel();
        jP10 = new javax.swing.JLabel();
        jADD1 = new javax.swing.JButton();
        jADD2 = new javax.swing.JButton();
        jADD3 = new javax.swing.JButton();
        jADD4 = new javax.swing.JButton();
        jADD5 = new javax.swing.JButton();
        jADD6 = new javax.swing.JButton();
        jADD7 = new javax.swing.JButton();
        jADD9 = new javax.swing.JButton();
        jADD10 = new javax.swing.JButton();
        jADD8 = new javax.swing.JButton();
        jPriceTotal = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("WELCOME !");

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/kidsland/LogoKidsLand.png"))); // NOI18N
        jLabel2.setText("jLabel2");

        photo2.setText("RIDE2");

        photo3.setText("RIDE3");

        photo6.setText("RIDE6");

        photo4.setText("RIDE4");

        photo5.setText("RIDE5");

        photo7.setText("RIDE7");

        photo8.setText("RIDE8");

        photo10.setText("RIDE10");

        photo1.setText("RIDE1");
        photo1.addInputMethodListener(new java.awt.event.InputMethodListener() {
            public void caretPositionChanged(java.awt.event.InputMethodEvent evt) {
                photo1CaretPositionChanged(evt);
            }
            public void inputMethodTextChanged(java.awt.event.InputMethodEvent evt) {
                photo1InputMethodTextChanged(evt);
            }
        });

        jPAY.setText("Pay");
        jPAY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPAYActionPerformed(evt);
            }
        });

        jLabel13.setText("Total price:");

        photo9.setText("RIDE9");

        jP1.setText("PRICE1");

        jP2.setText("PRICE2");

        jP4.setText("PRICE4");

        jP5.setText("PRICE5");

        jP6.setText("PRICE6");

        jP7.setText("PRICE7");

        jP9.setText("PRICE9");

        jP3.setText("PRICE3");

        jP8.setText("PRICE8");

        jP10.setText("PRICE10");

        jADD1.setText("ADD");
        jADD1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jADD1ActionPerformed(evt);
            }
        });

        jADD2.setText("ADD");
        jADD2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jADD2ActionPerformed(evt);
            }
        });

        jADD3.setText("ADD");
        jADD3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jADD3ActionPerformed(evt);
            }
        });

        jADD4.setText("ADD");
        jADD4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jADD4ActionPerformed(evt);
            }
        });

        jADD5.setText("ADD");
        jADD5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jADD5ActionPerformed(evt);
            }
        });

        jADD6.setText("ADD");
        jADD6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jADD6ActionPerformed(evt);
            }
        });

        jADD7.setText("ADD");
        jADD7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jADD7ActionPerformed(evt);
            }
        });

        jADD9.setText("ADD");
        jADD9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jADD9ActionPerformed(evt);
            }
        });

        jADD10.setText("ADD");
        jADD10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jADD10ActionPerformed(evt);
            }
        });

        jADD8.setText("ADD");
        jADD8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jADD8ActionPerformed(evt);
            }
        });

        jPriceTotal.setText("PRICE");

        jMenu1.setText("Welcome");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Discover");
        jMenu2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu2ActionPerformed(evt);
            }
        });
        jMenuBar1.add(jMenu2);

        jMenu4.setText("Booking");
        jMenu4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu4ActionPerformed(evt);
            }
        });
        jMenuBar1.add(jMenu4);

        jMenu3.setText("MyAccount");
        jMenu3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu3ActionPerformed(evt);
            }
        });
        jMenuBar1.add(jMenu3);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(photo1, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jDC1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jP1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jADD1)
                                .addGap(36, 36, 36))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jP6, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(48, 48, 48)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(21, 21, 21)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jADD7)
                                    .addComponent(jP7, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(55, 55, 55)
                                .addComponent(jP8, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(39, 39, 39))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jDC2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jP2, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jADD2))
                                                .addGap(42, 42, 42)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(jSpinner3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jDC3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addComponent(jADD3)
                                                    .addComponent(jP3, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                            .addGroup(layout.createSequentialGroup()
                                                .addComponent(photo2, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(photo3, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(4, 4, 4)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(photo4, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jDC4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSpinner4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jP4, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jADD4))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(photo5, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jDC5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSpinner5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jADD5)
                            .addComponent(jP5, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(photo6, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jDC6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSpinner6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jADD6))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(photo7, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jDC7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jSpinner7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(20, 20, 20)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jDC8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jScrollBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, 0)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(photo8, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jSpinner8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addComponent(jADD8))
                                .addGap(20, 20, 20)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jSpinner9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jDC9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(photo9, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jP9, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jADD9))
                                        .addGap(20, 20, 20)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jADD10)
                                            .addComponent(photo10, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jDC10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jSpinner10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jP10, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jPriceTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(jPAY)))))))
                .addContainerGap(20, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(129, 129, 129)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(photo2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(photo4, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(photo1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(photo3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jDC1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(9, 9, 9)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jDC2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jP1)
                            .addComponent(jP2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jADD1)
                            .addComponent(jADD2)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(photo5, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jDC4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jDC5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(9, 9, 9)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jSpinner4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jSpinner5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jP4)
                                    .addComponent(jP5)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jDC3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(9, 9, 9)
                                .addComponent(jSpinner3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jP3)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jADD3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jADD5)
                            .addComponent(jADD4))))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 322, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(photo6, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(photo7, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(photo8, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(photo10, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jDC7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jDC6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(jDC10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jDC8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(photo9, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jDC9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jSpinner8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jSpinner9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jSpinner6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(jP6)
                                        .addGap(8, 8, 8)
                                        .addComponent(jADD6))
                                    .addGroup(layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jP8)
                                            .addComponent(jP9)
                                            .addComponent(jP10))
                                        .addGap(8, 8, 8)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                            .addComponent(jADD8)
                                            .addComponent(jADD9)
                                            .addComponent(jADD10)))))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(jSpinner10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(jSpinner7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jP7)
                                .addGap(8, 8, 8)
                                .addComponent(jADD7)))
                        .addGap(5, 5, 5)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(jPAY)
                            .addComponent(jPriceTotal))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        // TODO add your handling code here:
        new WelcomePage().setVisible(true);
        this.setVisible(true);
    }//GEN-LAST:event_jMenu1ActionPerformed

    private void jMenu2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu2ActionPerformed
        // TODO add your handling code here:
        new DiscoverPage().setVisible(true);
        this.setVisible(true);
    }//GEN-LAST:event_jMenu2ActionPerformed

    private void jMenu4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu4ActionPerformed
        // TODO add your handling code here:
        new BookingPage().setVisible(true);
        this.setVisible(true);
    }//GEN-LAST:event_jMenu4ActionPerformed

    private void jMenu3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu3ActionPerformed
        // TODO add your handling code here:
        new MemberPage().setVisible(true);
        new EmployeePage().setVisible(true);
        this.setVisible(true);
    }//GEN-LAST:event_jMenu3ActionPerformed

    private void photo1InputMethodTextChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_photo1InputMethodTextChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_photo1InputMethodTextChanged

    private void photo1CaretPositionChanged(java.awt.event.InputMethodEvent evt) {//GEN-FIRST:event_photo1CaretPositionChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_photo1CaretPositionChanged

    private void jPAYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPAYActionPerformed
        // TODO add your handling code here:
        new PaymentPage(idPanier, TotalPrice).setVisible(true); // Passez idPanier et TotalPrice ici
        this.setVisible(false);
    }//GEN-LAST:event_jPAYActionPerformed

    private void jADD1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jADD1ActionPerformed
         Connection conn = null;
    try {
        int qte1 = (Integer) jSpinner1.getValue();
        java.util.Date selectedDate = jDC1.getDate();
        java.sql.Date sqlDate = new java.sql.Date(selectedDate.getTime());
        int rideId = 2;

        conn = Mysqlc.mycon();
        conn.setAutoCommit(false);

        String updateRideQuery = "UPDATE ride SET Quantité = Quantité - ? WHERE id = ?";
        try (PreparedStatement pstmt = conn.prepareStatement(updateRideQuery)) {
            pstmt.setInt(1, qte1);
            pstmt.setInt(2, rideId);
            pstmt.executeUpdate();
        }

        String insertPanierItemQuery = "INSERT INTO panieritem (idPanier, idRide, date, quantité) VALUES (?, ?, ?, ?)";
        try (PreparedStatement pstmt = conn.prepareStatement(insertPanierItemQuery)) {
            pstmt.setInt(1, idPanier);
            pstmt.setInt(2, rideId);
            pstmt.setDate(3, sqlDate);
            pstmt.setInt(4, qte1);
            pstmt.executeUpdate();
        }

        String priceQuery = "SELECT prix FROM ride WHERE id = ?";
        PreparedStatement priceStmt = conn.prepareStatement(priceQuery);
        priceStmt.setInt(1, rideId);
        ResultSet rs = priceStmt.executeQuery();
        double price = 0;
        if (rs.next()) {
            price = rs.getDouble("prix");
        }
        rs.close();
        priceStmt.close();

        double totalForRide = price * qte1;
        TotalPrice += totalForRide;
        jPriceTotal.setText(String.valueOf(TotalPrice));

        conn.commit();
        conn.setAutoCommit(true);

        JOptionPane.showMessageDialog(rootPane, "Le panier a été mis à jour avec succès !");
    } catch (NumberFormatException e) {
        System.out.println("La valeur du JSpinner n'est pas un entier valide.");
    } catch (Exception e) {
        e.printStackTrace();
        try {
            if (conn != null) {
                conn.rollback();
            }
        } catch (Exception rollbackEx) {
            rollbackEx.printStackTrace();
        }
        JOptionPane.showMessageDialog(rootPane, "Erreur lors de la mise à jour du panier : " + e.getMessage());
    } finally {
        try {
            if (conn != null) {
                conn.setAutoCommit(true);
                conn.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
          
    }//GEN-LAST:event_jADD1ActionPerformed

    private void jADD4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jADD4ActionPerformed
        // TODO add your handling code here:
        Connection conn = null;
    try {
        int qte1 = (Integer) jSpinner4.getValue();
        java.util.Date selectedDate = jDC4.getDate();
        java.sql.Date sqlDate = new java.sql.Date(selectedDate.getTime());
        int rideId = 5;

        conn = Mysqlc.mycon();
        conn.setAutoCommit(false);

        String updateRideQuery = "UPDATE ride SET Quantité = Quantité - ? WHERE id = ?";
        try (PreparedStatement pstmt = conn.prepareStatement(updateRideQuery)) {
            pstmt.setInt(1, qte1);
            pstmt.setInt(2, rideId);
            pstmt.executeUpdate();
        }

        String insertPanierItemQuery = "INSERT INTO panieritem (idPanier, idRide, date, quantité) VALUES (?, ?, ?, ?)";
        try (PreparedStatement pstmt = conn.prepareStatement(insertPanierItemQuery)) {
            pstmt.setInt(1, idPanier);
            pstmt.setInt(2, rideId);
            pstmt.setDate(3, sqlDate);
            pstmt.setInt(4, qte1);
            pstmt.executeUpdate();
        }

        String priceQuery = "SELECT prix FROM ride WHERE id = ?";
        PreparedStatement priceStmt = conn.prepareStatement(priceQuery);
        priceStmt.setInt(1, rideId);
        ResultSet rs = priceStmt.executeQuery();
        double price = 0;
        if (rs.next()) {
            price = rs.getDouble("prix");
        }
        rs.close();
        priceStmt.close();

        double totalForRide = price * qte1;
        TotalPrice += totalForRide;
        jPriceTotal.setText(String.valueOf(TotalPrice));

        conn.commit();
        conn.setAutoCommit(true);

        JOptionPane.showMessageDialog(rootPane, "Le panier a été mis à jour avec succès !");
    } catch (NumberFormatException e) {
        System.out.println("La valeur du JSpinner n'est pas un entier valide.");
    } catch (Exception e) {
        e.printStackTrace();
        try {
            if (conn != null) {
                conn.rollback();
            }
        } catch (Exception rollbackEx) {
            rollbackEx.printStackTrace();
        }
        JOptionPane.showMessageDialog(rootPane, "Erreur lors de la mise à jour du panier : " + e.getMessage());
    } finally {
        try {
            if (conn != null) {
                conn.setAutoCommit(true);
                conn.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    }//GEN-LAST:event_jADD4ActionPerformed

    private void jADD2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jADD2ActionPerformed
        // TODO add your handling code here:
        
        Connection conn = null;
    try {
        int qte1 = (Integer) jSpinner2.getValue();
        java.util.Date selectedDate = jDC2.getDate();
        java.sql.Date sqlDate = new java.sql.Date(selectedDate.getTime());
        int rideId = 3;

        conn = Mysqlc.mycon();
        conn.setAutoCommit(false);

        String updateRideQuery = "UPDATE ride SET Quantité = Quantité - ? WHERE id = ?";
        try (PreparedStatement pstmt = conn.prepareStatement(updateRideQuery)) {
            pstmt.setInt(1, qte1);
            pstmt.setInt(2, rideId);
            pstmt.executeUpdate();
        }

        String insertPanierItemQuery = "INSERT INTO panieritem (idPanier, idRide, date, quantité) VALUES (?, ?, ?, ?)";
        try (PreparedStatement pstmt = conn.prepareStatement(insertPanierItemQuery)) {
            pstmt.setInt(1, idPanier);
            pstmt.setInt(2, rideId);
            pstmt.setDate(3, sqlDate);
            pstmt.setInt(4, qte1);
            pstmt.executeUpdate();
        }

        String priceQuery = "SELECT prix FROM ride WHERE id = ?";
        PreparedStatement priceStmt = conn.prepareStatement(priceQuery);
        priceStmt.setInt(1, rideId);
        ResultSet rs = priceStmt.executeQuery();
        double price = 0;
        if (rs.next()) {
            price = rs.getDouble("prix");
        }
        rs.close();
        priceStmt.close();

        double totalForRide = price * qte1;
        TotalPrice += totalForRide;
        jPriceTotal.setText(String.valueOf(TotalPrice));

        conn.commit();
        conn.setAutoCommit(true);

        JOptionPane.showMessageDialog(rootPane, "Le panier a été mis à jour avec succès !");
    } catch (NumberFormatException e) {
        System.out.println("La valeur du JSpinner n'est pas un entier valide.");
    } catch (Exception e) {
        e.printStackTrace();
        try {
            if (conn != null) {
                conn.rollback();
            }
        } catch (Exception rollbackEx) {
            rollbackEx.printStackTrace();
        }
        JOptionPane.showMessageDialog(rootPane, "Erreur lors de la mise à jour du panier : " + e.getMessage());
    } finally {
        try {
            if (conn != null) {
                conn.setAutoCommit(true);
                conn.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    }//GEN-LAST:event_jADD2ActionPerformed

    private void jADD3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jADD3ActionPerformed
        // TODO add your handling code here:
        Connection conn = null;
    try {
        int qte1 = (Integer) jSpinner3.getValue();
        java.util.Date selectedDate = jDC3.getDate();
        java.sql.Date sqlDate = new java.sql.Date(selectedDate.getTime());
        int rideId = 4;

        conn = Mysqlc.mycon();
        conn.setAutoCommit(false);

        String updateRideQuery = "UPDATE ride SET Quantité = Quantité - ? WHERE id = ?";
        try (PreparedStatement pstmt = conn.prepareStatement(updateRideQuery)) {
            pstmt.setInt(1, qte1);
            pstmt.setInt(2, rideId);
            pstmt.executeUpdate();
        }

        String insertPanierItemQuery = "INSERT INTO panieritem (idPanier, idRide, date, quantité) VALUES (?, ?, ?, ?)";
        try (PreparedStatement pstmt = conn.prepareStatement(insertPanierItemQuery)) {
            pstmt.setInt(1, idPanier);
            pstmt.setInt(2, rideId);
            pstmt.setDate(3, sqlDate);
            pstmt.setInt(4, qte1);
            pstmt.executeUpdate();
        }

        String priceQuery = "SELECT prix FROM ride WHERE id = ?";
        PreparedStatement priceStmt = conn.prepareStatement(priceQuery);
        priceStmt.setInt(1, rideId);
        ResultSet rs = priceStmt.executeQuery();
        double price = 0;
        if (rs.next()) {
            price = rs.getDouble("prix");
        }
        rs.close();
        priceStmt.close();

        double totalForRide = price * qte1;
        TotalPrice += totalForRide;
        jPriceTotal.setText(String.valueOf(TotalPrice));

        conn.commit();
        conn.setAutoCommit(true);

        JOptionPane.showMessageDialog(rootPane, "Le panier a été mis à jour avec succès !");
    } catch (NumberFormatException e) {
        System.out.println("La valeur du JSpinner n'est pas un entier valide.");
    } catch (Exception e) {
        e.printStackTrace();
        try {
            if (conn != null) {
                conn.rollback();
            }
        } catch (Exception rollbackEx) {
            rollbackEx.printStackTrace();
        }
        JOptionPane.showMessageDialog(rootPane, "Erreur lors de la mise à jour du panier : " + e.getMessage());
    } finally {
        try {
            if (conn != null) {
                conn.setAutoCommit(true);
                conn.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    }//GEN-LAST:event_jADD3ActionPerformed

    private void jADD5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jADD5ActionPerformed
        // TODO add your handling code here:
        Connection conn = null;
    try {
        int qte1 = (Integer) jSpinner5.getValue();
        java.util.Date selectedDate = jDC5.getDate();
        java.sql.Date sqlDate = new java.sql.Date(selectedDate.getTime());
        int rideId = 6;

        conn = Mysqlc.mycon();
        conn.setAutoCommit(false);

        String updateRideQuery = "UPDATE ride SET Quantité = Quantité - ? WHERE id = ?";
        try (PreparedStatement pstmt = conn.prepareStatement(updateRideQuery)) {
            pstmt.setInt(1, qte1);
            pstmt.setInt(2, rideId);
            pstmt.executeUpdate();
        }

        String insertPanierItemQuery = "INSERT INTO panieritem (idPanier, idRide, date, quantité) VALUES (?, ?, ?, ?)";
        try (PreparedStatement pstmt = conn.prepareStatement(insertPanierItemQuery)) {
            pstmt.setInt(1, idPanier);
            pstmt.setInt(2, rideId);
            pstmt.setDate(3, sqlDate);
            pstmt.setInt(4, qte1);
            pstmt.executeUpdate();
        }

        String priceQuery = "SELECT prix FROM ride WHERE id = ?";
        PreparedStatement priceStmt = conn.prepareStatement(priceQuery);
        priceStmt.setInt(1, rideId);
        ResultSet rs = priceStmt.executeQuery();
        double price = 0;
        if (rs.next()) {
            price = rs.getDouble("prix");
        }
        rs.close();
        priceStmt.close();

        double totalForRide = price * qte1;
        TotalPrice += totalForRide;
        jPriceTotal.setText(String.valueOf(TotalPrice));

        conn.commit();
        conn.setAutoCommit(true);

        JOptionPane.showMessageDialog(rootPane, "Le panier a été mis à jour avec succès !");
    } catch (NumberFormatException e) {
        System.out.println("La valeur du JSpinner n'est pas un entier valide.");
    } catch (Exception e) {
        e.printStackTrace();
        try {
            if (conn != null) {
                conn.rollback();
            }
        } catch (Exception rollbackEx) {
            rollbackEx.printStackTrace();
        }
        JOptionPane.showMessageDialog(rootPane, "Erreur lors de la mise à jour du panier : " + e.getMessage());
    } finally {
        try {
            if (conn != null) {
                conn.setAutoCommit(true);
                conn.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    }//GEN-LAST:event_jADD5ActionPerformed

    private void jADD6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jADD6ActionPerformed
        // TODO add your handling code here:
        Connection conn = null;
    try {
        int qte1 = (Integer) jSpinner6.getValue();
        java.util.Date selectedDate = jDC6.getDate();
        java.sql.Date sqlDate = new java.sql.Date(selectedDate.getTime());
        int rideId = 7;

        conn = Mysqlc.mycon();
        conn.setAutoCommit(false);

        String updateRideQuery = "UPDATE ride SET Quantité = Quantité - ? WHERE id = ?";
        try (PreparedStatement pstmt = conn.prepareStatement(updateRideQuery)) {
            pstmt.setInt(1, qte1);
            pstmt.setInt(2, rideId);
            pstmt.executeUpdate();
        }

        String insertPanierItemQuery = "INSERT INTO panieritem (idPanier, idRide, date, quantité) VALUES (?, ?, ?, ?)";
        try (PreparedStatement pstmt = conn.prepareStatement(insertPanierItemQuery)) {
            pstmt.setInt(1, idPanier);
            pstmt.setInt(2, rideId);
            pstmt.setDate(3, sqlDate);
            pstmt.setInt(4, qte1);
            pstmt.executeUpdate();
        }

        String priceQuery = "SELECT prix FROM ride WHERE id = ?";
        PreparedStatement priceStmt = conn.prepareStatement(priceQuery);
        priceStmt.setInt(1, rideId);
        ResultSet rs = priceStmt.executeQuery();
        double price = 0;
        if (rs.next()) {
            price = rs.getDouble("prix");
        }
        rs.close();
        priceStmt.close();

        double totalForRide = price * qte1;
        TotalPrice += totalForRide;
        jPriceTotal.setText(String.valueOf(TotalPrice));

        conn.commit();
        conn.setAutoCommit(true);

        JOptionPane.showMessageDialog(rootPane, "Le panier a été mis à jour avec succès !");
    } catch (NumberFormatException e) {
        System.out.println("La valeur du JSpinner n'est pas un entier valide.");
    } catch (Exception e) {
        e.printStackTrace();
        try {
            if (conn != null) {
                conn.rollback();
            }
        } catch (Exception rollbackEx) {
            rollbackEx.printStackTrace();
        }
        JOptionPane.showMessageDialog(rootPane, "Erreur lors de la mise à jour du panier : " + e.getMessage());
    } finally {
        try {
            if (conn != null) {
                conn.setAutoCommit(true);
                conn.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    }//GEN-LAST:event_jADD6ActionPerformed

    private void jADD7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jADD7ActionPerformed
        // TODO add your handling code here:
        Connection conn = null;
    try {
        int qte1 = (Integer) jSpinner7.getValue();
        java.util.Date selectedDate = jDC7.getDate();
        java.sql.Date sqlDate = new java.sql.Date(selectedDate.getTime());
        int rideId = 8;

        conn = Mysqlc.mycon();
        conn.setAutoCommit(false);

        String updateRideQuery = "UPDATE ride SET Quantité = Quantité - ? WHERE id = ?";
        try (PreparedStatement pstmt = conn.prepareStatement(updateRideQuery)) {
            pstmt.setInt(1, qte1);
            pstmt.setInt(2, rideId);
            pstmt.executeUpdate();
        }

        String insertPanierItemQuery = "INSERT INTO panieritem (idPanier, idRide, date, quantité) VALUES (?, ?, ?, ?)";
        try (PreparedStatement pstmt = conn.prepareStatement(insertPanierItemQuery)) {
            pstmt.setInt(1, idPanier);
            pstmt.setInt(2, rideId);
            pstmt.setDate(3, sqlDate);
            pstmt.setInt(4, qte1);
            pstmt.executeUpdate();
        }

        String priceQuery = "SELECT prix FROM ride WHERE id = ?";
        PreparedStatement priceStmt = conn.prepareStatement(priceQuery);
        priceStmt.setInt(1, rideId);
        ResultSet rs = priceStmt.executeQuery();
        double price = 0;
        if (rs.next()) {
            price = rs.getDouble("prix");
        }
        rs.close();
        priceStmt.close();

        double totalForRide = price * qte1;
        TotalPrice += totalForRide;
        jPriceTotal.setText(String.valueOf(TotalPrice));

        conn.commit();
        conn.setAutoCommit(true);

        JOptionPane.showMessageDialog(rootPane, "Le panier a été mis à jour avec succès !");
    } catch (NumberFormatException e) {
        System.out.println("La valeur du JSpinner n'est pas un entier valide.");
    } catch (Exception e) {
        e.printStackTrace();
        try {
            if (conn != null) {
                conn.rollback();
            }
        } catch (Exception rollbackEx) {
            rollbackEx.printStackTrace();
        }
        JOptionPane.showMessageDialog(rootPane, "Erreur lors de la mise à jour du panier : " + e.getMessage());
    } finally {
        try {
            if (conn != null) {
                conn.setAutoCommit(true);
                conn.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    }//GEN-LAST:event_jADD7ActionPerformed

    private void jADD8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jADD8ActionPerformed
        // TODO add your handling code here:
        Connection conn = null;
    try {
        int qte1 = (Integer) jSpinner8.getValue();
        java.util.Date selectedDate = jDC8.getDate();
        java.sql.Date sqlDate = new java.sql.Date(selectedDate.getTime());
        int rideId = 9;

        conn = Mysqlc.mycon();
        conn.setAutoCommit(false);

        String updateRideQuery = "UPDATE ride SET Quantité = Quantité - ? WHERE id = ?";
        try (PreparedStatement pstmt = conn.prepareStatement(updateRideQuery)) {
            pstmt.setInt(1, qte1);
            pstmt.setInt(2, rideId);
            pstmt.executeUpdate();
        }

        String insertPanierItemQuery = "INSERT INTO panieritem (idPanier, idRide, date, quantité) VALUES (?, ?, ?, ?)";
        try (PreparedStatement pstmt = conn.prepareStatement(insertPanierItemQuery)) {
            pstmt.setInt(1, idPanier);
            pstmt.setInt(2, rideId);
            pstmt.setDate(3, sqlDate);
            pstmt.setInt(4, qte1);
            pstmt.executeUpdate();
        }

        String priceQuery = "SELECT prix FROM ride WHERE id = ?";
        PreparedStatement priceStmt = conn.prepareStatement(priceQuery);
        priceStmt.setInt(1, rideId);
        ResultSet rs = priceStmt.executeQuery();
        double price = 0;
        if (rs.next()) {
            price = rs.getDouble("prix");
        }
        rs.close();
        priceStmt.close();

        double totalForRide = price * qte1;
        TotalPrice += totalForRide;
        jPriceTotal.setText(String.valueOf(TotalPrice));

        conn.commit();
        conn.setAutoCommit(true);

        JOptionPane.showMessageDialog(rootPane, "Le panier a été mis à jour avec succès !");
    } catch (NumberFormatException e) {
        System.out.println("La valeur du JSpinner n'est pas un entier valide.");
    } catch (Exception e) {
        e.printStackTrace();
        try {
            if (conn != null) {
                conn.rollback();
            }
        } catch (Exception rollbackEx) {
            rollbackEx.printStackTrace();
        }
        JOptionPane.showMessageDialog(rootPane, "Erreur lors de la mise à jour du panier : " + e.getMessage());
    } finally {
        try {
            if (conn != null) {
                conn.setAutoCommit(true);
                conn.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    }//GEN-LAST:event_jADD8ActionPerformed

    private void jADD9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jADD9ActionPerformed
        // TODO add your handling code here:
        Connection conn = null;
    try {
        int qte1 = (Integer) jSpinner9.getValue();
        java.util.Date selectedDate = jDC9.getDate();
        java.sql.Date sqlDate = new java.sql.Date(selectedDate.getTime());
        int rideId = 10;

        conn = Mysqlc.mycon();
        conn.setAutoCommit(false);

        String updateRideQuery = "UPDATE ride SET Quantité = Quantité - ? WHERE id = ?";
        try (PreparedStatement pstmt = conn.prepareStatement(updateRideQuery)) {
            pstmt.setInt(1, qte1);
            pstmt.setInt(2, rideId);
            pstmt.executeUpdate();
        }

        String insertPanierItemQuery = "INSERT INTO panieritem (idPanier, idRide, date, quantité) VALUES (?, ?, ?, ?)";
        try (PreparedStatement pstmt = conn.prepareStatement(insertPanierItemQuery)) {
            pstmt.setInt(1, idPanier);
            pstmt.setInt(2, rideId);
            pstmt.setDate(3, sqlDate);
            pstmt.setInt(4, qte1);
            pstmt.executeUpdate();
        }

        String priceQuery = "SELECT prix FROM ride WHERE id = ?";
        PreparedStatement priceStmt = conn.prepareStatement(priceQuery);
        priceStmt.setInt(1, rideId);
        ResultSet rs = priceStmt.executeQuery();
        double price = 0;
        if (rs.next()) {
            price = rs.getDouble("prix");
        }
        rs.close();
        priceStmt.close();

        double totalForRide = price * qte1;
        TotalPrice += totalForRide;
        jPriceTotal.setText(String.valueOf(TotalPrice));

        conn.commit();
        conn.setAutoCommit(true);

        JOptionPane.showMessageDialog(rootPane, "Le panier a été mis à jour avec succès !");
    } catch (NumberFormatException e) {
        System.out.println("La valeur du JSpinner n'est pas un entier valide.");
    } catch (Exception e) {
        e.printStackTrace();
        try {
            if (conn != null) {
                conn.rollback();
            }
        } catch (Exception rollbackEx) {
            rollbackEx.printStackTrace();
        }
        JOptionPane.showMessageDialog(rootPane, "Erreur lors de la mise à jour du panier : " + e.getMessage());
    } finally {
        try {
            if (conn != null) {
                conn.setAutoCommit(true);
                conn.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    }//GEN-LAST:event_jADD9ActionPerformed

    private void jADD10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jADD10ActionPerformed
        // TODO add your handling code here:
        Connection conn = null;
    try {
        int qte1 = (Integer) jSpinner10.getValue();
        java.util.Date selectedDate = jDC10.getDate();
        java.sql.Date sqlDate = new java.sql.Date(selectedDate.getTime());
        int rideId = 11;

        conn = Mysqlc.mycon();
        conn.setAutoCommit(false);

        String updateRideQuery = "UPDATE ride SET Quantité = Quantité - ? WHERE id = ?";
        try (PreparedStatement pstmt = conn.prepareStatement(updateRideQuery)) {
            pstmt.setInt(1, qte1);
            pstmt.setInt(2, rideId);
            pstmt.executeUpdate();
        }

        String insertPanierItemQuery = "INSERT INTO panieritem (idPanier, idRide, date, quantité) VALUES (?, ?, ?, ?)";
        try (PreparedStatement pstmt = conn.prepareStatement(insertPanierItemQuery)) {
            pstmt.setInt(1, idPanier);
            pstmt.setInt(2, rideId);
            pstmt.setDate(3, sqlDate);
            pstmt.setInt(4, qte1);
            pstmt.executeUpdate();
        }

        String priceQuery = "SELECT prix FROM ride WHERE id = ?";
        PreparedStatement priceStmt = conn.prepareStatement(priceQuery);
        priceStmt.setInt(1, rideId);
        ResultSet rs = priceStmt.executeQuery();
        double price = 0;
        if (rs.next()) {
            price = rs.getDouble("prix");
        }
        rs.close();
        priceStmt.close();

        double totalForRide = price * qte1;
        TotalPrice += totalForRide;
        jPriceTotal.setText(String.valueOf(TotalPrice));

        conn.commit();
        conn.setAutoCommit(true);

        JOptionPane.showMessageDialog(rootPane, "Le panier a été mis à jour avec succès !");
    } catch (NumberFormatException e) {
        System.out.println("La valeur du JSpinner n'est pas un entier valide.");
    } catch (Exception e) {
        e.printStackTrace();
        try {
            if (conn != null) {
                conn.rollback();
            }
        } catch (Exception rollbackEx) {
            rollbackEx.printStackTrace();
        }
        JOptionPane.showMessageDialog(rootPane, "Erreur lors de la mise à jour du panier : " + e.getMessage());
    } finally {
        try {
            if (conn != null) {
                conn.setAutoCommit(true);
                conn.close();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
    }//GEN-LAST:event_jADD10ActionPerformed

    private void loadImage(String employeeName, JLabel label) {
        String query = "SELECT photo FROM ride WHERE id = ?";
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        try {
            conn = Mysqlc.mycon();
            if (conn != null) {
                pstmt = conn.prepareStatement(query);
                pstmt.setString(1, employeeName);
                rs = pstmt.executeQuery();
                if (rs.next()) {
                    byte[] imgBytes = rs.getBytes("photo");
                    if (imgBytes != null) {
                        ByteArrayInputStream bis = new ByteArrayInputStream(imgBytes);
                        Image image = ImageIO.read(bis);
                        ImageIcon imageIcon = new ImageIcon(image);
                        label.setIcon(imageIcon);
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "No image found for this employee");
                    }
                }
            } else {
                JOptionPane.showMessageDialog(rootPane, "Database connection failed.");
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(rootPane, "Error when loading image: " + e.getMessage());
        } finally {
            try {
                if (rs != null) rs.close();
                if (pstmt != null) pstmt.close();
                if (conn != null) conn.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
}
    
    private void loadPrice(int rideId, JLabel label ) {
        String query = "SELECT prix FROM ride WHERE id = ?";
        try {
            Connection conn = Mysqlc.mycon();
            PreparedStatement pstmt = conn.prepareStatement(query);
            pstmt.setInt(1, rideId);
            ResultSet rs = pstmt.executeQuery();

            if (rs.next()) {
                double price = rs.getDouble("prix");
                label.setText("Prix: " + price + "€");
            } else {
                label.setText("Attraction non trouvée.");
            }

        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Erreur lors de la récupération du prix: " + e.getMessage());
        }
    }


    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BookingPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BookingPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BookingPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BookingPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BookingPage().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.Box.Filler filler1;
    private javax.swing.JButton jADD1;
    private javax.swing.JButton jADD10;
    private javax.swing.JButton jADD2;
    private javax.swing.JButton jADD3;
    private javax.swing.JButton jADD4;
    private javax.swing.JButton jADD5;
    private javax.swing.JButton jADD6;
    private javax.swing.JButton jADD7;
    private javax.swing.JButton jADD8;
    private javax.swing.JButton jADD9;
    private com.toedter.calendar.JDateChooser jDC1;
    private com.toedter.calendar.JDateChooser jDC10;
    private com.toedter.calendar.JDateChooser jDC2;
    private com.toedter.calendar.JDateChooser jDC3;
    private com.toedter.calendar.JDateChooser jDC4;
    private com.toedter.calendar.JDateChooser jDC5;
    private com.toedter.calendar.JDateChooser jDC6;
    private com.toedter.calendar.JDateChooser jDC7;
    private com.toedter.calendar.JDateChooser jDC8;
    private com.toedter.calendar.JDateChooser jDC9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JLabel jP1;
    private javax.swing.JLabel jP10;
    private javax.swing.JLabel jP2;
    private javax.swing.JLabel jP3;
    private javax.swing.JLabel jP4;
    private javax.swing.JLabel jP5;
    private javax.swing.JLabel jP6;
    private javax.swing.JLabel jP7;
    private javax.swing.JLabel jP8;
    private javax.swing.JLabel jP9;
    private javax.swing.JButton jPAY;
    private javax.swing.JLabel jPriceTotal;
    private javax.swing.JScrollBar jScrollBar1;
    private javax.swing.JScrollBar jScrollBar2;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner10;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JSpinner jSpinner3;
    private javax.swing.JSpinner jSpinner4;
    private javax.swing.JSpinner jSpinner5;
    private javax.swing.JSpinner jSpinner6;
    private javax.swing.JSpinner jSpinner7;
    private javax.swing.JSpinner jSpinner8;
    private javax.swing.JSpinner jSpinner9;
    private javax.swing.JLabel photo1;
    private javax.swing.JLabel photo10;
    private javax.swing.JLabel photo2;
    private javax.swing.JLabel photo3;
    private javax.swing.JLabel photo4;
    private javax.swing.JLabel photo5;
    private javax.swing.JLabel photo6;
    private javax.swing.JLabel photo7;
    private javax.swing.JLabel photo8;
    private javax.swing.JLabel photo9;
    // End of variables declaration//GEN-END:variables
}
