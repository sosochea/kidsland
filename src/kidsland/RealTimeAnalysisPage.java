/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package kidsland;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.category.CategoryDataset;

import javax.swing.*;
import java.awt.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
/**
 *
 * @author Cheas
 */
public class RealTimeAnalysisPage extends javax.swing.JFrame {
    
    private DefaultCategoryDataset dataset;

    /**
     * Creates new form RealTimeAnalysisPage
     */
    public RealTimeAnalysisPage() {
        initComponents();
        
        setTitle("Real-Time Attraction Sales Analysis");
        setSize(800, 600);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        setLocationRelativeTo(null);

        dataset = new DefaultCategoryDataset();
        JFreeChart barChart = ChartFactory.createBarChart(
                "Attractions Sales in real time", "Attraction", "Quantity Sold", dataset);

        ChartPanel chartPanel = new ChartPanel(barChart);
        chartPanel.setPreferredSize(new Dimension(800, 600));
        setContentPane(chartPanel);

        // Démarrer le thread de mise à jour des données
        Thread dataUpdateThread = new Thread(new DataUpdateTask());
        dataUpdateThread.start();
    }

    private class DataUpdateTask implements Runnable {
        @Override
        public void run() {
            while (true) {
                updateDataset();
                try {
                    Thread.sleep(5000); // Mettre à jour toutes les 5 secondes
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }

        private void updateDataset() {
            String query = "SELECT ride.nom, SUM(panieritem.quantité) as totalQuantity " +
                    "FROM panieritem " +
                    "JOIN ride ON panieritem.idRide = ride.id " +
                    "GROUP BY ride.nom";

            try (Connection conn = Mysqlc.mycon();
                 PreparedStatement pstmt = conn.prepareStatement(query);
                 ResultSet rs = pstmt.executeQuery()) {

                DefaultCategoryDataset newDataset = new DefaultCategoryDataset();

                while (rs.next()) {
                    String rideName = rs.getString("nom");
                    int quantity = rs.getInt("totalQuantity");
                    newDataset.addValue(quantity, "Quantity", rideName);
                }

                SwingUtilities.invokeLater(() -> {
                    dataset.clear();
                    for (int i = 0; i < newDataset.getRowCount(); i++) {
                        for (int j = 0; j < newDataset.getColumnCount(); j++) {
                            dataset.addValue(newDataset.getValue(i, j), newDataset.getRowKey(i), newDataset.getColumnKey(j));
                        }
                    }
                });

            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(RealTimeAnalysisPage.this, "Error when loading data: " + e.getMessage());
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RealTimeAnalysisPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RealTimeAnalysisPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RealTimeAnalysisPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RealTimeAnalysisPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        SwingUtilities.invokeLater(() -> {
            RealTimeAnalysisPage example = new RealTimeAnalysisPage();
            example.setVisible(true);
        });
        }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
                }
